#!/bin/bash
_green() {
	tput setaf 2 ;
}

_white() {
	tput setaf 7 ;
}

_bold() {
	if [[ $1 != "" ]] ; then
		$1 ;
	fi ;
	tput bold ;
}

_tset() {
	tput sgr 0 ;
}

_gecho() {
	_bold _green
	for line ; do
		echo "${line}" ;
	done ;
	_tset ;
}

_line() {
	if [[ $@ != "" ]] ; then
		$@ ;
	fi ;
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' = ;
}

_glecho() {
	_line _bold _white ;
	_green ;
	echo "$1" ;
	_tset ;
}

_specho() {
	printf '  ' ;
	echo "$1" ;
}

_gr23() {
	raccoon=(
	'         ///////                             //////' 
	'       /////   ///                         //     /// ' 
	'      ///   ##### //                      //  #####  //' 
	'     //  ########## //                    /    ######  /' 
	'    ///  ########### /    //////////////////////  ####  /' 
	'    ///  #########    ////////////////////////////  #   //' 
	'     ///    #  //////////////////////////////////////  //' 
	'            /////////////////////////////////////////' 
	'          /////////////////////////////////////////////' 
	'        //////////////////////  /////////////  |||     /' 
	'      /////////////////     ||||   ////////  ||||||||||' 
	'     ////////////////  |||||||||||  //////  ||   ||||||||' 
	'    //////////////   |||||||   ||||  //////  || ||||||||||' 
	'   ////////////// ||||||||||  |||||  ///////  ||||||||||||' 
	'  ////////////   |||||||||||||||||  ///////////  |||||||||' 
	' ////////////  ||||||||||||||||||  ////////////// ||||||||' 
	'    ////////  ||||||||||||||||||| ////////////////  |||||' 
	'    /////// |||||||||||||||||||  ////////    $$$  // ||' 
	'       ///  ||||||||||||||||||  //////// $$$$$$$  ///' 
	'           ||||||||||||||||||  ///////////       ///' 
	'              ||||||||||||||  ////////////////////' 
	'                      ||||||  ///////////////////' 
	'                                     ////////'
	) ;
	_gecho "${raccoon[@]}" ;
}

_trim() {
	top=$(echo "${PWD}") ;
	root="${top}/${1}" ;

	cd "${root}" ;

	for dir in $(ls -d */) ; do
		if [[ "$dir" =~ "stock" ]] ; then
			bak="${dir}io/scalable/bak" ;
		else
			bak="${dir}scalable/bak" ;
		fi ;
		drejects=("${bak}" "${dir}scaled") ;

		for dreject in ${drejects[@]} ; do
			if [ -e "${dreject}" ] ; then
				rm -R "${dreject}" ;
				echo "    Removed ${dreject}" ;
			fi ;
		done ;
	done ;

	es="emblems/scalable" ;
	rejects=(${es}/emblem-greenraccoon23.svg ${es}/emblem-greenraccoon23-transparent.svg) ;
	for reject in ${rejects[@]} ; do
		if [ -e "${reject}" ] ; then
			rm "${reject}" ;
			echo "    Removed ${reject}" ;
		fi ;
	done ;

	cd "${top}" ;
}

_clean() {
	top=$(echo "${PWD}") ;

	root="${top}/${1}" ;
	cd "${root}" ;

	for dir in $(ls -d */) ; do
		if [[ "$dir" =~ "stock" ]] ; then
			current="${dir}io/scalable/" ;
		else
			current="${dir}scalable/" ;
		fi ;

		_specho "${current}" ;
		cd "${root}" ;
		_cleanDir "${current}" ;
	done ;

	cd "${top}" ;
}

_cleanDir() {
	cd "$1" ;
	for f in $(ls) ; do
		e=$(echo "${f}" | sed -e 's/\.[a-zA-Z]*$//') ;

		if [ -d "${f}" ] ; then
			_cleanDir "${f}" ;
		elif [[ $e == "svg" ]] ; then
			_cleanFilter "${img}" ;
		fi ;
	done ;
}

_cleanFilter() {
	if readlink -q "${1}" >/dev/null ; then
		_cleanSvg "${1}" ;
	fi ;
}

_cleanSvg() {
	svgcleaner-cli "${1}" "${1}" ;
}

_copy() {
	from="${1}" ;
	to="${2}" ;

	if [ -e ${to} ] ; then
		rm -R "${to}" ;
	fi ;
	cp -R "${from}" "${to}" ;
	sed -i "s/Name=.*/Name=${to}/" "${to}/index.theme" ;
}

_coloriseAll() {
	from="${1}-Green" ;
	to="${1}-${2}" ;
	if [[ "$2" == "ArchBlue" ]] ; then
		color="#1793D1" ;
	else
		color="$2" ;
	fi ;

	_specho "${to}..." ;
	
	_copy "${from}" "${to}" ;
	_colorise "green" "${color}" "${to}" "${to}" ;
	_colorise "#4caf50" "${color}" "${to}" "${to}" ;
}

_coloriseMost() {
	from="${1}-Green" ;
	to="${1}-${2}" ;
	color="$2" ;

	_specho "${to}..." ;

	_copy "${from}" "${to}" ;
	_colorise "green" "${color}" "${to}" "${to}" ;
}

_colorise() {
	../svg-edit -r -Q -o "${1}" -n "${2}" "${3}" "${4}" ;
}

_crunch() {
	d="archdroid-icon-theme"
	xz="${d}.tar.xz" ;
	
	if [ -e "${xz}" ] ; then
		rm "${xz}" ;
	fi ;
	./crunch "${d}" ;
	bak="${d}_$(date +%m-%d-%y).tar.xz"
	cp "${xz}" "bak/${bak}"
}

_pause() {
	for i in $(seq 1 "$1") ; do
		printf "  \r%d/%d" "$i" "$1" ;
		sleep 1 ;
	done ;
	printf "\n" ;
}

_pkgbuild() {
	pkgver=$(_gitVer) ;
	sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD ;

	a="archdroid-icon-theme" ;
	repo="https://raw.githubusercontent.com/GreenRaccoon23/${a}" ;
	xz="${repo}/master/${a}.tar.xz" ;
	md=$(_gitmd5 "${xz}") ;
	sed -i "s/md5sums=.*/md5sums=(\"${md}\")/" PKGBUILD ;
}

_gitmd5() {
	md=$(curl "${1}" | md5sum) ;
	echo "${md%  *}" ;
}

_gitVer() {
	( set -o pipefail
	  git describe --long --tags 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
	  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
	)
}

_git() {
	git add .
	git commit -m "$@"
	git push origin master
}

_burp() {
	mkaurball ;
	burp *gz ;
	rm *gz ;
}

commit="$@" ;
d="archdroid-icon-theme" ;
b="Archdroid" ;
toClean="${b}-Green/" ;
colors=(ArchBlue Blue BlueGrey Brown Cyan DeepPurple Grey Indigo KellyGreen LightBlue LightGreen Lime Pink Purple Shamrock Teal) ;
colorsSpecial=(Amber DeepOrange Orange Red Yellow) ;

_gr23 ;

cd "${d}" ;

_glecho "Removing backups..." ;
_trim "${toClean}" ;
echo "Done." ;

_glecho "Cleaning svg files..." ;
_clean "${toClean}" ;
echo "Done." ;

_glecho "Generating color variants..." ;
for c in ${colors[@]} ; do
	_coloriseAll "${b}" "${c}" ;
done ;
for c in ${colorsSpecial[@]} ; do
	_coloriseMost "${b}" "${c}" ;
done ;
echo "Done." ;

cd .. ;

_glecho "Generating archive..." ;
_crunch ;
echo "Done." ;

_glecho "Updating git repo..." ;
_git "${commit}" ;
echo "Done." ;

_glecho "Waiting 120 seconds for git to update..." ;
_pause 120 ;
echo "Done." ;

_glecho "Updating PKGBUILD..." ;
_pkgbuild ;
echo "Done." ;

_glecho "Uploading PKGBUILD to git..." ;
_git "${commit}" ;
echo "Done." ;

_glecho "Uploading package to aur..." ;
_burp ;
echo "Done." ;
