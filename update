#!/bin/bash
_c() {
	declare -A colors;
	colors=( ["black"]="0" ["red"]="1" ["green"]="2" ["yellow"]="3" ["blue"]="4" ["magenta"]="5" ["cyan"]="6" ["white"]="7" );

	for name in "${!colors[@]}"; do
		if [[ "${name}" == "${1}" ]]; then
			col="${colors["$name"]}";
		fi;
	done;

	if [ -n "${col}" ]; then
		tput setaf "${col}";
	fi;
}

_C() {
	if [ -n "${1}" ] ; then
		_c "${1}";
	fi;
	tput bold;
}

_cOff() {
	tput sgr 0
}

_green() {
	tput setaf 2;
}

_white() {
	tput setaf 7;
}

_bold() {
	if [[ $1 != "" ]]; then
		$1;
	fi;
	tput bold;
}

_tset() {
	tput sgr 0;
}

_gecho() {
	_bold _green
	for line; do
		echo "${line}";
	done;
	_tset;
}

_line() {
	if [[ $@ != "" ]]; then
		$@;
	fi;
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =;
}

_glecho() {
	_line _bold _white;
	_green;
	echo "$1";
	_tset;
}

_specho() {
	printf '  ';
	echo "$1";
}

_gr23() {
	raccoon=(
	'         ///////                             //////' 
	'       /////   ///                         //     /// ' 
	'      ///   ##### //                      //  #####  //' 
	'     //  ########## //                    /    ######  /' 
	'    ///  ########### /    //////////////////////  ####  /' 
	'    ///  #########    ////////////////////////////  #   //' 
	'     ///    #  //////////////////////////////////////  //' 
	'            /////////////////////////////////////////' 
	'          /////////////////////////////////////////////' 
	'        //////////////////////  /////////////  |||     /' 
	'      /////////////////     ||||   ////////  ||||||||||' 
	'     ////////////////  |||||||||||  //////  ||   ||||||||' 
	'    //////////////   |||||||   ||||  //////  || ||||||||||' 
	'   ////////////// ||||||||||  |||||  ///////  ||||||||||||' 
	'  ////////////   |||||||||||||||||  ///////////  |||||||||' 
	' ////////////  ||||||||||||||||||  ////////////// ||||||||' 
	'    ////////  ||||||||||||||||||| ////////////////  |||||' 
	'    /////// |||||||||||||||||||  ////////    $$$  // ||' 
	'       ///  ||||||||||||||||||  //////// $$$$$$$  ///' 
	'           ||||||||||||||||||  ///////////       ///' 
	'              ||||||||||||||  ////////////////////' 
	'                      ||||||  ///////////////////' 
	'                                     ////////'
	);
	_gecho "${raccoon[@]}";
}

_gprint() {
	_C green;

	if [ -n "$2" ]; then
		printf "$1" ${@:2};
	else
		printf "$@";
	fi;

	#if [ -z $2 ]; then
	#	printf $1;
	#	_cOff;
	#	return;
	#fi;

	#a=( $@ );
	#len="${#a[@]}";
	#slc=${a[@]:0:$len-1};
	#z=${a[$len-1]};

	#for s in ${slc[@]}; do
	#	echo "${s}";
	#done;
	#printf "${z}";
	
	_cOff;
}

_yN() {
	if [ -n "$@" ]; then
		_gprint "$@";
	fi;

	read -p " [y/N]: " q
	case $q in
		y|Y)
			echo 1;
			;;
		*)
			echo 0;
			;;
	esac
}

_Yn() {
	if [ -n "$1" ]; then
		_gprint "$@";
	fi;

	read -p " [Y/n]: " q
	case $q in
		n|N)
			echo 1;
			;;
		*)
			echo 0;
			;;
	esac
}

_TrimIt() {
	pushd "${1}" >/dev/null;

	drs=( actions animations apps categories devices emblems mimetypes places status stock/io )
	for dir in ${drs[@]}; do
		bak="${dir}/scalable/bak";
		drejects=("${bak}" "${dir}/scaled");

		for dreject in ${drejects[@]}; do
			if [ -d "${dreject}" ]; then
				rm -R "${dreject}";
				echo "    Removed ${dreject}";
			fi;
		done;
	done;

	es="emblems/scalable";
	rejects=( 
			 scale
		     index.theme.bak 
		     ${es}/emblem-greenraccoon23.svg 
		     ${es}/emblem-greenraccoon23-transparent.svg 
		    );
	for reject in ${rejects[@]}; do
		if [ -e "${reject}" ]; then
			rm "${reject}";
			echo "    Removed ${reject}";
		fi;
	done;

	popd >/dev/null;
}

_CleanIt() {
	pushd "${1}" >/dev/null;

	subdirs=(actions animations apps categories devices emblems mimetypes places status stock/io);

	for dir in "${subdirs[@]}"; do
		current="${dir}/scalable/";
		printf "  %s" "${current}";
		nCleaned=0;
		_cleanDir "${current}";
		echo;
	done;

	stubborn=( 
		      actions/scalable/media-eject.svg 
		      actions/scalable/selection-end-symbolic.svg 
		      actions/scalable/selection-start-symbolic.svg 
		      animations/scalable/process-working.svg
		      apps/scalable/accessories-calculator.svg 
		      apps/scalable/utilities-system-monitor.svg
		      categories/scalable/preferences-system-directory.svg
		      mimetypes/scalable/text-x-sql.svg
		      places/scalable/folder-go.svg
		     );
	for weird in "${stubborn[@]}"; do
		../../svg-edit -Q -o "#4caf50" -n green "${weird}";
	done;

	popd >/dev/null;
}

_cleanDir() {
	pushd "$1" >/dev/null;
	for f in $(ls); do
		e="${f#*.}"

		if [ -d "${f}" ]; then
			_cleanDir "${f}";
		elif [[ $e == "svg" ]]; then
			_cleanFilter "${f}";
		fi;
	done;
	popd >/dev/null;
}

_cleanFilter() {
	if ! readlink -q "${1}" >/dev/null; then
		return
	fi;
	_cleanSvg "${1}";
	_cleanProgress;
}

_cleanSvg() {
	svgcleaner-cli "${1}" "${1}" &>/dev/null;
}

_cleanProgress() {
	((nCleaned+=1));
	spaces=$((30-${#current}));
	w="$(_printSp $spaces)";

	printf "\r  %s%s%d" "${current}" "${w}" "${nCleaned}";
}

_printSp() {
	for (( i=1; i<=$1; i++)) ; do printf " " ; done
}

_copy() {
	from="${1}";
	to="${2}";

	if [ -e ${to} ]; then
		rm -R "${to}";
	fi;
	cp -R "${from}" "${to}";
	sed -i "s/Name=.*/Name=${to}/" "${to}/index.theme";
}

_ColIt() {
	normal=( 
		    ArchBlue Blue BlueGrey Brown 
			Cyan DeepPurple Grey Indigo 
			KellyGreen LightBlue LightGreen Lime 
			Pink Purple Shamrock Teal 
		   );
	special=( 
			 Amber DeepOrange Orange 
			 Red Yellow 
			);

	for c in ${normal[@]}; do
		_colorizeAll "${a}" "${c}";
	done;
	for c in ${special[@]}; do
		_colorizeMost "${a}" "${c}";
	done;
}

_colorizeAll() {
	from="${1}-Green";
	to="${1}-${2}";
	if [[ "$2" == "ArchBlue" ]]; then
		color="#1793D1";
	else
		color="$2";
	fi;

	_specho "${to}...";
	
	_copy "${from}" "${to}";
	_colorize "green" "${color}" "${to}" "${to}";
	_colorize "#4caf50" "${color}" "${to}" "${to}";
}

_colorizeMost() {
	from="${1}-Green";
	to="${1}-${2}";
	color="$2";

	_specho "${to}...";

	_copy "${from}" "${to}";
	_colorize "green" "${color}" "${to}" "${to}";
}

_colorize() {
	../svg-edit -r -Q -o "${1}" -n "${2}" "${3}" "${4}";
}

_CrushIt() {
	f="${1}";
	xz="${f}.tar.xz";
	
	if [ -e "${xz}" ]; then
		rm "${xz}";
	fi;
	./crunch "${f}";
	_bak "${xz}" "bak/"
}

_bak() {
	f="${1}";
	d="$(_dir "${2}")";


	a="${f%%.*}";
	bak="${a}_$(date +%m-%d-%y).tar.xz";

	cp -f "${f}" "${d}${bak}";
}

_dir() {
	if [[ "${1%/*}" == "${1}" ]]; then
		echo "${1}/";
	fi;
	echo "${1}";
}


_git() {
	git add .
	git commit -m "$@"
	git push origin master
}

_pause() {
	for i in $(seq 1 "$1"); do
		printf "\r  %d/%d" "$i" "$1";
		sleep 1;
	done;
	printf "\n";
}

_PkgbuildIt() {
	pushd "aur" >/dev/null;
	_pkgbuildAur;
	popd >/dev/null;

	pushd "aur-git" >/dev/null;
	_pkgbuildGit;
	popd >/dev/null;
}

_pkgbuildAur() {
	pkgver=$(_gitVer);
	sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD;

	a="archdroid-icon-theme";
	repo="https://raw.githubusercontent.com/GreenRaccoon23/${a}";
	xz="${repo}/master/${a}.tar.xz";
	md=$(_gitmd5 "${xz}");
	sed -i "s/md5sums=.*/md5sums=(\"${md}\")/" PKGBUILD;
}

_pkgbuildGit() {
	pkgver=$(_gitVer);
	sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD;
}

_gitmd5() {
	md=$(curl "${1}" | md5sum);
	echo "${md%  *}";
}

_gitVer() {
	( set -o pipefail
	  git describe --long --tags 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
	  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
	)
}

_BurpIt() {
	for d in "aur" "aur-git"; do
		pushd "${d}" >/dev/null;
		_burp;
		popd >/dev/null;
	done;
}

_burp() {
	mkaurball;
	burp -c x11 *gz;
	rm *gz;
	rm *xz >/dev/null;
}

_Local() {
	pushd "${d}" >/dev/null;

	_glecho "Removing backups...";
	_TrimIt "${default}";
	echo "Done.";

	_glecho "Cleaning svg files...";
	_CleanIt "${default}";
	echo "Done.";

	_glecho "Generating color variants...";
	_ColIt;
	echo "Done.";

	popd >/dev/null;

	_glecho "Generating archive...";
	_CrushIt "archdroid-icon-theme";
	echo "Done.";
}

_Upload() {
	commit="$@";
	if [[ "${commit}" == "" ]]; then
		read -p "Enter commit message: " commit;
	fi;

	_glecho "Updating git repo...";
	_git "${commit}";
	echo "Done.";

	_glecho "Waiting 120 seconds for git to update...";
	_pause 120;
	echo "Done.";

	_glecho "Updating PKGBUILD...";
	_PkgbuildIt;
	echo "Done.";

	_glecho "Uploading PKGBUILD to git...";
	_git "${commit}";
	echo "Done.";

	_glecho "Uploading package to aur...";
	_BurpIt;
	echo "Done.";
}

d="archdroid-icon-theme";
a="Archdroid";
default="${a}-Green/";

_gr23;

_gprint "Update local files?";
if [[ $(_Yn) == 0 ]]; then
	_Local;
fi;

_gprint "Upload package to repos?";
if [[ $(_Yn) == 0 ]]; then
	_Upload $@;
fi;

