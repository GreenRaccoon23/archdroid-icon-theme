#!/bin/bash

# Set console color.
_c() {
    tput sgr0;
    (($# == 0)) && return 0;
    
    local -A Codes=( 
        ["black"]="0" ["red"]="1" ["green"]="2" ["yellow"]="3" 
        ["blue"]="4" ["magenta"]="5" ["cyan"]="6" ["white"]="7" 
        ["bk"]="0" ["r"]="1" ["g"]="2" ["y"]="3" 
        ["bu"]="4" ["m"]="5" ["c"]="6" ["w"]="7" 
    );

    local k c;
    for k in "${!Codes[@]}"; do
        if [[ "${k}" != "${1}" ]]; then
            continue;
        fi;
        c="${Codes["$k"]}";
    done;

    [ "${c}" ] && tput setaf "${c}";
}

# Set bold console color.
_C() {
    (($# > 0)) && _c "${1}";
    tput bold;
}

# Reset console color to normal.
_u() {
    tput sgr0;
}

# Print any number of messages in bold green.
_gecho() {
    _C green
    for line; do
        echo "${line}";
    done;
    _u;
}

# Print a message in bold green WITHOUT appending a new line.
_gprint() {
    _C green
    printf "%s" "$*";
    _u;
}

# Print a line break.
# Optionally, run a command first in order to colorize it.
_line() {
    if (($# > 0)); then
        eval "$@";
    fi;

    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =;
    
    if (($# > 0)); then
        _u;
    fi;
}

# Print a bold white line break,
#   followed by any number of messages in bold green.
_glecho() {
    _line _C white;

    _C green;
    local m;
    for m; do
        echo "${m}";
    done;

    _u;
}

# Print any number of messages, indenting each by two spaces.
_specho() {
    local m;
    for m; do
        printf '  ';
        echo "${m}";
    done;
}

# Print green raccoon ASCII image.
_gr23() {
    local -ar raccoon=( 
        '         ///////                             //////' 
        '       /////   ///                         //     /// ' 
        '      ///   ##### //                      //  #####  //' 
        '     //  ########## //                    /    ######  /' 
        '    ///  ########### /    //////////////////////  ####  /' 
        '    ///  #########    ////////////////////////////  #   //' 
        '     ///    #  //////////////////////////////////////  //' 
        '            /////////////////////////////////////////' 
        '          /////////////////////////////////////////////' 
        '        //////////////////////  /////////////  |||     /' 
        '      /////////////////     ||||   ////////  ||||||||||' 
        '     ////////////////  |||||||||||  //////  ||   ||||||||' 
        '    //////////////   |||||||   ||||  //////  || ||||||||||' 
        '   ////////////// ||||||||||  |||||  ///////  ||||||||||||' 
        '  ////////////   |||||||||||||||||  ///////////  |||||||||' 
        ' ////////////  ||||||||||||||||||  ////////////// ||||||||' 
        '    ////////  ||||||||||||||||||| ////////////////  |||||' 
        '    /////// |||||||||||||||||||  ////////    $$$  // ||' 
        '       ///  ||||||||||||||||||  //////// $$$$$$$  ///' 
        '           ||||||||||||||||||  ///////////       ///' 
        '              ||||||||||||||  ////////////////////' 
        '                      ||||||  ///////////////////' 
        '                                     ////////' 
    );

    _gecho "${raccoon[@]}";
}

# Run a command silently.
_q() {
    eval "$@" >/dev/null;
}

# Run a command and exit if it fails.
_Run() {
    eval "$@" || exit $?;
}

# Ask user to answer a "yes or no" question.
# Analyse the user's answer, with NO as the default.
_yN() {
    local ans;
    read -p "$* [y/N]: " ans;

    case "${ans}" in [yY] | [yY][eE][sS])
        return 0;;
    esac;
    return 1;
}

# Ask user to answer a "yes or no" question.
# Analyse the user's answer, with YES as the default.
_Yn() {
    local ans;
    read -p "$* [Y/n]: " ans;

    case "${ans}" in [nN] | [nN][oO])
        return 1;;
    esac;
    return 0;
}

# Trim the suffix of a string.
_trSfx() {
    echo "${1%${2}*}";
}

# Trim the prefix of a string.
_trPfx() {
    echo "${1#*${2}}";
}

# Remove all unnecessary and backup files from the base theme.
_TrimBase() {
    _trimDirs;
    _trimFiles;
}

# Remove backup directories from the base theme.
_trimDirs() {
    local -ar Trash=( 
        "scalable/bak" 
        "scaled" 
    );

    local dir;
    for dir in "${SUBDIRS[@]}"; do
        _q pushd "${dir}";
        _rm "${Trash[@]}";
        _q popd;
    done;
}

# Remove unnecessary/backup files from the base theme.
_trimFiles() {
    local -r e="emblems/scalable";
    local -ar Trash=( 
        "scale" 
        "index.theme.bak" 
        "${e}/emblem-greenraccoon23.svg" 
        "${e}/emblem-greenraccoon23-transparent.svg" 
    );

    _rm "${Trash[@]}";
}

# Remove files and/or directories.
_rm() {
    local file;
    for file; do

        if [ -d "${file}" ]; then
            rm -R "${file}";
            echo "    Removed ${file}";
            continue;

        elif [ -e "${file}" ]; then
            rm "${file}";
            echo "    Removed ${file}";
            continue;

        else
            continue;

        fi;
        
    done;
}

# Run `svg-cleaner` on all of the icons in the base theme.
_CleanBase() {
     find . -type f -name "*.svg" -exec svgcleaner-cli {} {} &>/dev/null \;; 
    _recolor;
}
# Re-colorize certain icons:
#   those which lose their color after being cleaned by `svg-cleaner`.
_recolor() {
    local -ar REDOS=( 
        "actions/scalable/media-eject.svg" 
        "actions/scalable/selection-end-symbolic.svg" 
        "actions/scalable/selection-start-symbolic.svg" 
        "animations/scalable/process-working.svg" 
        "apps/scalable/accessories-calculator.svg" 
        "apps/scalable/utilities-system-monitor.svg" 
        "categories/scalable/preferences-system-directory.svg" 
        "mimetypes/scalable/text-x-sql.svg" 
        "places/scalable/folder-go.svg" 
    );

    local r;
    for r in "${REDOS[@]}"; do
        ../../svg-edit -Q -o "#4caf50" -n green "${r}";
    done;
}

# Colorize all of the icon themes.
_ColorizeThemes() {
    # Mark the themes for which the color of every icon needs to be changed.
    local -ar Normal=( 
        ArchBlue Blue BlueGrey Brown 
        Cyan DeepPurple Grey Indigo 
        KellyGreen LightBlue LightGreen Lime 
        Pink Purple Shamrock Teal 
    );

    # Mark the themes which need some icons to remain green.
    local -ar Special=( 
        Amber DeepOrange Orange 
        Red Yellow 
    );

    local theme;

    for theme in "${Normal[@]}"; do
        _colorizeAll "${theme}";
    done;

    for theme in "${Special[@]}"; do
        _colorizeMost "${theme}";
    done;
}

# Colorize every icon in the theme.
_colorizeAll() {
    local color="${1}";
    local theme="${A}-${1}";
    if [[ "${1}" == "ArchBlue" ]]; then
        color="#1793D1";
    fi;

    _specho "${theme}...";
    
    _copyTheme "${DEFAULT_THEME}" "${theme}";
    _colorize "green" "${color}" "${theme}" "${theme}";
    _colorize "#4caf50" "${color}" "${theme}" "${theme}";
}

# Colorize all but a select few icons in the theme.
_colorizeMost() {
    local color="$1";
    local theme="${A}-${1}";

    _specho "${theme}...";

    _copyTheme "${DEFAULT_THEME}" "${theme}";
    _colorize "green" "${color}" "${theme}" "${theme}";
}

# Create a copy of theme $1, naming the copy as $2.
# Then, update the new theme's name within its "index.theme" file.
_copyTheme() {
    local orig="${1}";
    local copy="${2}";

    if [ -e "${copy}" ]; then
        rm -R "${copy}";
    fi;

    cp -R "${orig}" "${copy}";

    sed -i "s/Name=.*/Name=${copy}/" "${copy}/index.theme";
}

# Run the `svg-edit` binary
#   to colorize all svg images under the specified directory.
# Change color $1 to color $2,
#   for all svg images under directory $3,
#   and place the edited images in directory $4.
_colorize() {
    local oldColor="${1}";
    local newColor="${2}";
    local oldDir="${3}";
    local newDir="${4}";

    ../svg-edit -r -Q -o "${oldColor}" -n "${newColor}" "${oldDir}" "${newDir}";
}

# Make a highly compressed xz archive of the icon theme.
#   The xz archive is 10-15% the size of the uncompressed files.
_Package() {
    local xz="${PKGNAME}.tar.xz";
    
    if [ -e "${xz}" ]; then
        gvfs-trash "${xz}";
    fi;
    _Run ./xzz "${PKGNAME}";
    _Run _Archive "${xz}" "bak/";
}

# Make a copy of the compressed package
#   and place the new copy into the folder of archived packages.
_Archive() {
    local file="${1}";
    local dest="${2}";
    dest="$(_fmtDir "${2}")";

    local name="${file%%.*}";
    local ext="${file#*.}";

    local bak;
    # Older format:
    # bak="${name}_$(date +%m-%d-%y).${ext}";

    # New format:
    bak="${name}_$(date +%Y-%m-%d).${ext}";

    cp -f "${file}" "${dest}${bak}";
}

# Append a trailing '/' to a string [directory]
#   if it does not already have one.
_fmtDir() {
    if [[ "${1%/*}" == "${1}" ]]; then
        echo "${1}/";
    fi;
    echo "${1}";
}

# Add a new commit for all files in the repo.
# Do not push to master (yet).
_gitCm() {
    git add .;
    if [ "$*" ]; then
        git commit -m "$*";
    else
        git commit;
    fi;
}

# Push local changes to the master branch.
# Add a new commit if necessary.
_gitPush() {
    git push origin master && return 0;
    _gitCm;
    _gitPush;
}

# Pause for a specified number of seconds.
_pause() {
    local -i seconds="${1}";

    local -i i;
    #for i in $(seq 1 "${seconds}"); do
    for ((i=1;i<=seconds;i++)); do
        printf "\r  %d/%d" "${i}" "${seconds}";
        sleep 1;
    done;
    printf "\n";
}

# Update the AUR PKGBUILD files
#   for the regular and '-git' variants of this package.
_PkgbuildUpdate() {
    local -r pkgver=$(_gitVer);

    _q pushd "aur/${PKGNAME}";
    _pkgbuildAur "${pkgver}";
    _q popd;

    _q pushd "aur-git/${PKGNAME}-git";
    _pkgbuildGit "${pkgver}";
    _q popd;
}

# Update the PKGBUILD for the regular AUR version of this package
#   (update both the 'pkgver' and 'md5sums' in the PKGBUILD).
_pkgbuildAur() {
    # Update pkgver.
    local -r pkgver="${1}";
    sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD;

    # Update md5sums.
    local -r repo="https://raw.githubusercontent.com/GreenRaccoon23/${PKGNAME}";
    local -r xz="${repo}/master/${PKGNAME}.tar.xz";
    local -r md=$(_gitmd5 "${xz}");
    sed -i "s/md5sums=.*/md5sums=(\"${md}\")/" PKGBUILD;
}

# Update the PKGBUILD for the '-git' variant of this package in the AUR
#   (update the 'pkgver' only in the PKGBUILD).
_pkgbuildGit() {
    local -r pkgver="${1}";
    sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD;
}

# Fetch the md5sums of an online file.
_gitmd5() {
    md=$(curl "${1}" | md5sum);
    echo "${md%  *}";
    [ -e "$(basename "${1}")" ] || return 0;

    _Yn "Remove $(realpath "${1}")" &&
        gvfs-trash "$(basename "${1}")";
}

# Return the git version of a locally cloned git repo.
_gitVer() {
    ( set -o pipefail
      git describe --long --tags 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
      printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
    )
}

# Upload the package to the AUR (BOTH AUR 3 and AUR 4).
_AurUpdate() {
    local -ar Aurs=( 
        "aur/archdroid-icon-theme" 
        "aur-git/archdroid-icon-theme-git" 
    );

    local dir;
    for dir in "${Aurs[@]}"; do
        _q pushd "${dir}";
        # _aur3;
        ../../aur4 "$@";
        _q popd;
    done;
}

# Upload the package to the AUR (AUR 3 only, NOT AUR 4).
_aur3() {
    mkaurball;
    burp -c x11 ./*gz;
    rm ./*gz;
}

# Update package locally.
_Local() {
    # pushd 1
    _q pushd "${PKGNAME}";

    # pushd 2
    _q pushd "${DEFAULT_THEME}";

    _glecho "Removing backups...";
    _Run _TrimBase;
    echo "Done.";

    _glecho "Cleaning svg files...";
    _Run _CleanBase;
    echo "Done.";

    # popd 2
    _q popd;

    _glecho "Generating color variants...";
    _Run _ColorizeThemes;
    echo "Done.";
    
    # popd 1
    _q popd;

    _glecho "Generating archive...";
    _Run _Package "${PKGNAME}";
    echo "Done.";
}

# Add a new commit for any repo changes.
# Don't push to master (yet).
_Commit() {
    _Run _gitCm "${COMMIT}";
    COMMIT="$(git log -n1 --pretty=format:'%s')";
    echo "Done.";
}

# Update and upload the package to both git and the AUR.
_Upload() {
    _glecho "Updating git repo...";
    _Run _gitPush "${COMMIT}";
    echo "Done.";

    _glecho "Waiting 120 seconds for git to update...";
    _pause 120;
    echo "Done.";

    _glecho "Updating PKGBUILD...";
    _Run _PkgbuildUpdate;
    echo "Done.";

    _glecho "Uploading PKGBUILD to git...";
    _Run _gitPush "${COMMIT}";
    echo "Done.";

    _glecho "Uploading package to aur...";
    _Run _AurUpdate "${COMMIT}";
    echo "Done.";
}

declare COMMIT="$*";

declare -r PKGNAME="archdroid-icon-theme";
declare -r A="Archdroid";
declare -r DEFAULT_THEME="${A}-Green/";
declare -ar SUBDIRS=( 
    actions animations apps categories 
    devices emblems mimetypes places 
    status stock/io 
);

_gr23;

_gprint "Update local files?";
_Yn && _Local;

_gprint "Add a new commit?";
_Yn && _Commit;

_gprint "Upload package to online repos?";
_Yn && _Upload;
