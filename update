#!/bin/bash
_green() {
	tput setaf 2;
}

_white() {
	tput setaf 7;
}

_bold() {
	if [[ $1 != "" ]]; then
		$1;
	fi;
	tput bold;
}

_tset() {
	tput sgr 0;
}

_gecho() {
	_bold _green
	for line; do
		echo "${line}";
	done;
	_tset;
}

_line() {
	if [[ $@ != "" ]]; then
		$@;
	fi;
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =;
}

_glecho() {
	_line _bold _white;
	_green;
	echo "$1";
	_tset;
}

_specho() {
	printf '  ';
	echo "$1";
}

_gr23() {
	raccoon=(
	'         ///////                             //////' 
	'       /////   ///                         //     /// ' 
	'      ///   ##### //                      //  #####  //' 
	'     //  ########## //                    /    ######  /' 
	'    ///  ########### /    //////////////////////  ####  /' 
	'    ///  #########    ////////////////////////////  #   //' 
	'     ///    #  //////////////////////////////////////  //' 
	'            /////////////////////////////////////////' 
	'          /////////////////////////////////////////////' 
	'        //////////////////////  /////////////  |||     /' 
	'      /////////////////     ||||   ////////  ||||||||||' 
	'     ////////////////  |||||||||||  //////  ||   ||||||||' 
	'    //////////////   |||||||   ||||  //////  || ||||||||||' 
	'   ////////////// ||||||||||  |||||  ///////  ||||||||||||' 
	'  ////////////   |||||||||||||||||  ///////////  |||||||||' 
	' ////////////  ||||||||||||||||||  ////////////// ||||||||' 
	'    ////////  ||||||||||||||||||| ////////////////  |||||' 
	'    /////// |||||||||||||||||||  ////////    $$$  // ||' 
	'       ///  ||||||||||||||||||  //////// $$$$$$$  ///' 
	'           ||||||||||||||||||  ///////////       ///' 
	'              ||||||||||||||  ////////////////////' 
	'                      ||||||  ///////////////////' 
	'                                     ////////'
	);
	_gecho "${raccoon[@]}";
}

_trim() {
	pushd "${1}" >/dev/null;

	for dir in $(ls -d */); do
		if [[ "$dir" =~ "stock" ]]; then
			bak="${dir}io/scalable/bak";
		else
			bak="${dir}scalable/bak";
		fi;
		drejects=("${bak}" "${dir}scaled");

		for dreject in ${drejects[@]}; do
			if [ -e "${dreject}" ]; then
				rm -R "${dreject}";
				echo "    Removed ${dreject}";
			fi;
		done;
	done;

	es="emblems/scalable";
	rejects=( 
		     index.theme.bak 
		     ${es}/emblem-greenraccoon23.svg 
		     ${es}/emblem-greenraccoon23-transparent.svg 
		    );
	for reject in ${rejects[@]}; do
		if [ -e "${reject}" ]; then
			rm "${reject}";
			echo "    Removed ${reject}";
		fi;
	done;

	popd >/dev/null;
}

_clean() {
	pushd "${1}" >/dev/null;

	subdirs=(actions animations apps categories devices emblems mimetypes places status stock/io);

	for dir in "${subdirs[@]}"; do
		current="${dir}/scalable/";
		printf "  %s" "${current}";
		nCleaned=0;
		_cleanDir "${current}";
		echo;
	done;

	popd >/dev/null;
}

_cleanDir() {
	pushd "$1" >/dev/null;
	for f in $(ls); do
		e="${f#*.}"

		if [ -d "${f}" ]; then
			_cleanDir "${f}";
		elif [[ $e == "svg" ]]; then
			_cleanFilter "${f}";
		fi;
	done;
	popd >/dev/null;
}

_cleanFilter() {
	if ! readlink -q "${1}" >/dev/null; then
		return
	fi;
	_cleanSvg "${1}";
	_cleanProgress;
}

_cleanSvg() {
	svgcleaner-cli "${1}" "${1}" &>/dev/null;
}

_cleanProgress() {
	((nCleaned+=1));
	spaces=$((30-${#current}));
	w="$(_printSp $spaces)";

	printf "\r  %s%s%d" "${current}" "${w}" "${nCleaned}";
}

_printSp() {
	for (( i=1; i<=$1; i++)) ; do printf " " ; done
}

_copy() {
	from="${1}";
	to="${2}";

	if [ -e ${to} ]; then
		rm -R "${to}";
	fi;
	cp -R "${from}" "${to}";
	sed -i "s/Name=.*/Name=${to}/" "${to}/index.theme";
}

_colorizeAll() {
	from="${1}-Green";
	to="${1}-${2}";
	if [[ "$2" == "ArchBlue" ]]; then
		color="#1793D1";
	else
		color="$2";
	fi;

	_specho "${to}...";
	
	_copy "${from}" "${to}";
	_colorize "green" "${color}" "${to}" "${to}";
	_colorize "#4caf50" "${color}" "${to}" "${to}";
}

_colorizeMost() {
	from="${1}-Green";
	to="${1}-${2}";
	color="$2";

	_specho "${to}...";

	_copy "${from}" "${to}";
	_colorize "green" "${color}" "${to}" "${to}";
}

_colorize() {
	../svg-edit -r -Q -o "${1}" -n "${2}" "${3}" "${4}";
}

_crush() {
	f="${1}";
	xz="${f}.tar.xz";
	
	if [ -e "${xz}" ]; then
		rm "${xz}";
	fi;
	./crunch "${f}";
	_bak "${xz}" "bak/"
}

_bak() {
	f="${1}";
	d="$(_dir "${2}")";


	a="${f%%.*}";
	bak="${a}_$(date +%m-%d-%y).tar.xz";

	cp -f "${f}" "${d}${bak}";
}

_dir() {
	if [[ "${1%/*}" == "${1}" ]]; then
		echo "${1}/";
	fi;
	echo "${1}";
}

_pause() {
	for i in $(seq 1 "$1"); do
		printf "\r  %d/%d" "$i" "$1";
		sleep 1;
	done;
	printf "\n";
}

_pkgbuild() {
	pkgver=$(_gitVer);
	sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD;

	a="archdroid-icon-theme";
	repo="https://raw.githubusercontent.com/GreenRaccoon23/${a}";
	xz="${repo}/master/${a}.tar.xz";
	md=$(_gitmd5 "${xz}");
	sed -i "s/md5sums=.*/md5sums=(\"${md}\")/" PKGBUILD;
}

_pkgbuildGit() {
	pkgver=$(_gitVer);
	sed -i "s/pkgver=.*/pkgver=${pkgver}/" PKGBUILD;
}

_gitmd5() {
	md=$(curl "${1}" | md5sum);
	echo "${md%  *}";
}

_gitVer() {
	( set -o pipefail
	  git describe --long --tags 2>/dev/null | sed 's/\([^-]*-g\)/r\1/;s/-/./g' ||
	  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
	)
}

_git() {
	git add .
	git commit -m "$@"
	git push origin master
}

_burp() {
	mkaurball;
	burp *gz;
	rm *gz;
}

topdir="${PWD}";

commit="$@";
if [[ "${commit}" == "" ]]; then
	read -p "Enter commit message: " commit;
fi;

d="archdroid-icon-theme";
a="Archdroid";
default="${a}-Green/";

colors=(ArchBlue Blue BlueGrey Brown Cyan DeepPurple Grey Indigo KellyGreen LightBlue LightGreen Lime Pink Purple Shamrock Teal);
colorsSpecial=(Amber DeepOrange Orange Red Yellow);

_gr23;

pushd "${d}" >/dev/null;

_glecho "Removing backups...";
_trim "${default}";
echo "Done.";

_glecho "Cleaning svg files...";
_clean "${default}";
echo "Done.";

_glecho "Generating color variants...";
for c in ${colors[@]}; do
	_colorizeAll "${a}" "${c}";
done;
for c in ${colorsSpecial[@]}; do
	_colorizeMost "${a}" "${c}";
done;
echo "Done.";

popd >/dev/null;

_glecho "Generating archive...";
_crush "archdroid-icon-theme";
echo "Done.";

_glecho "Updating git repo...";
_git "${commit}";
echo "Done.";

_glecho "Waiting 120 seconds for git to update...";
_pause 120;
echo "Done.";

_glecho "Updating PKGBUILD...";
pushd "aur" >/dev/null;
_pkgbuild;
popd >/dev/null;

pushd "aur-git" >/dev/null;
_pkgbuildGit;
popd >/dev/null;
echo "Done.";

_glecho "Uploading PKGBUILD to git...";
	_git "${commit}";
echo "Done.";

_glecho "Uploading package to aur...";
for d in "aur" "aur-git"; do
	pushd "${d}" >/dev/null;
	_burp;
	popd >/dev/null;
done;
echo "Done.";
